<directory_structure>
api/
  package.json
client/
  package.json
  tsconfig.json
  vite.config.ts
packages/
  agents/
    package.json
    rollup.config.js
    tsconfig.json
  api/
    package.json
    rollup.config.js
    tsconfig.json
  data-provider/
    react-query/
      package.json
    package.json
    rollup.config.js
    tsconfig.json
  data-schemas/
    package.json
    rollup.config.js
    tsconfig.json
package.json
tsconfig.base.json
tsconfig.json
</directory_structure>

<files>
<file path="api/package.json">
{
  "name": "@librechat/backend",
  "version": "v0.7.9-rc1",
  "type": "commonjs",
  "description": "",
  "scripts": {
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "_moduleAliases": {
    "~": "."
  },
   "imports": {
    "~/*": "./*"
  },
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai",
  "dependencies": {
    "@librechat/agents": "workspace:*",
    "@librechat/api": "workspace:*",
    "@librechat/data-schemas": "workspace:*",
    "@librechat/data-provider": "workspace:*"
  },
  "devDependencies": {
  }
}
</file>

<file path="client/package.json">
{
  "name": "@librechat/frontend",
  "version": "v0.7.9-rc1",
  "description": "",
  "type": "module",
  "scripts": {
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai",
  "dependencies": {
    "@librechat/data-provider": "workspace:*"
  },
  "devDependencies": {
  }
}
</file>

<file path="client/tsconfig.json">
{
  "extends": "../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "dist/tsconfig.tsbuildinfo",
    "moduleResolution": "bundler",
    "module": "ESNext",
    "target": "ESNext",
    "declarationDir": "./dist/types",
    "noEmit": false,
    "emitDeclarationOnly": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "jsx": "preserve",
    "baseUrl": "..",
    "paths": {
      "~/*": ["./client/src/*"],
      "test/*": ["./client/test/*"],
    },
  },
  "exclude": ["node_modules", "vite.config.ts"],
  "include": [
    "src/**/*",
    "test/**/*",
    "../e2e/**/*",
    "test/setupTests.js",
    "env.d.ts",
    "../config/translations/**/*.ts"
  ],
  "references": [
    { "path": "../packages/data-provider" }
  ]
}
</file>

<file path="client/vite.config.ts">
import react from '@vitejs/plugin-react';
import path from 'path';
import type { Plugin } from 'vite';
import { defineConfig } from 'vite';
import { compression } from 'vite-plugin-compression2';
import { nodePolyfills } from 'vite-plugin-node-polyfills';
import { VitePWA } from 'vite-plugin-pwa';
// https://vitejs.dev/config/
export default defineConfig(({ command }) => ({
  server: {
    host: 'localhost',
    port: 3090,
    strictPort: false,
    proxy: {
      '/api': {
        target: 'http://localhost:3080',
        changeOrigin: true,
      },
      '/oauth': {
        target: 'http://localhost:3080',
        changeOrigin: true,
      },
    },
  },
  // Set the directory where environment variables are loaded from and restrict prefixes
  envDir: '../',
  envPrefix: ['VITE_', 'SCRIPT_', 'DOMAIN_', 'ALLOW_'],
  plugins: [
    react(),
    nodePolyfills(),
    VitePWA({
      injectRegister: 'auto', // 'auto' | 'manual' | 'disabled'
      registerType: 'autoUpdate', // 'prompt' | 'autoUpdate'
      devOptions: {
        enabled: false, // disable service worker registration in development mode
      },
      useCredentials: true,
      includeManifestIcons: false,
      workbox: {
        globPatterns: [
          '**/*.{js,css,html}',
          'assets/favicon*.png',
          'assets/icon-*.png',
          'assets/apple-touch-icon*.png',
          'assets/maskable-icon.png',
          'manifest.webmanifest',
        ],
        globIgnores: ['images/**/*', '**/*.map', 'index.html'],
        maximumFileSizeToCacheInBytes: 4 * 1024 * 1024,
        navigateFallbackDenylist: [/^\/oauth/, /^\/api/],
      },
      includeAssets: [],
      manifest: {
        name: 'LibreChat',
        short_name: 'LibreChat',
        start_url: '/',
        display: 'standalone',
        background_color: '#000000',
        theme_color: '#009688',
        icons: [
          {
            src: '/assets/favicon-32x32.png',
            sizes: '32x32',
            type: 'image/png',
          },
          {
            src: '/assets/favicon-16x16.png',
            sizes: '16x16',
            type: 'image/png',
          },
          {
            src: '/assets/apple-touch-icon-180x180.png',
            sizes: '180x180',
            type: 'image/png',
          },
          {
            src: '/assets/icon-192x192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: '/assets/maskable-icon.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'maskable',
          },
        ],
      },
    }),
    sourcemapExclude({ excludeNodeModules: true }),
    compression({
      threshold: 10240,
    }),
  ],
  publicDir: command === 'serve' ? './public' : false,
  build: {
    sourcemap: process.env.NODE_ENV === 'development',
    outDir: './dist',
    minify: 'terser',
    rollupOptions: {
      preserveEntrySignatures: 'strict',
      output: {
        manualChunks(id: string) {
          if (id.includes('node_modules')) {
            // High-impact chunking for large libraries
            if (id.includes('@codesandbox/sandpack')) {
              return 'sandpack';
            }
            if (id.includes('react-virtualized')) {
              return 'virtualization';
            }
            if (id.includes('i18next') || id.includes('react-i18next')) {
              return 'i18n';
            }
            if (id.includes('lodash')) {
              return 'utilities';
            }
            if (id.includes('date-fns')) {
              return 'date-utils';
            }
            if (id.includes('@dicebear')) {
              return 'avatars';
            }
            if (id.includes('react-dnd') || id.includes('react-flip-toolkit')) {
              return 'react-interactions';
            }
            if (id.includes('react-hook-form')) {
              return 'forms';
            }
            if (id.includes('react-router-dom')) {
              return 'routing';
            }
            if (id.includes('qrcode.react') || id.includes('@marsidev/react-turnstile')) {
              return 'security-ui';
            }
            if (id.includes('@codemirror/view')) {
              return 'codemirror-view';
            }
            if (id.includes('@codemirror/state')) {
              return 'codemirror-state';
            }
            if (id.includes('@codemirror/language')) {
              return 'codemirror-language';
            }
            if (id.includes('@codemirror')) {
              return 'codemirror-core';
            }
            if (id.includes('react-markdown') || id.includes('remark-') || id.includes('rehype-')) {
              return 'markdown-processing';
            }
            if (id.includes('monaco-editor') || id.includes('@monaco-editor')) {
              return 'code-editor';
            }
            if (id.includes('react-window') || id.includes('react-virtual')) {
              return 'virtualization';
            }
            if (id.includes('zod') || id.includes('yup') || id.includes('joi')) {
              return 'validation';
            }
            if (id.includes('axios') || id.includes('ky') || id.includes('fetch')) {
              return 'http-client';
            }
            if (id.includes('react-spring') || id.includes('react-transition-group')) {
              return 'animations';
            }
            if (id.includes('react-select') || id.includes('downshift')) {
              return 'advanced-inputs';
            }
            if (id.includes('heic-to')) {
              return 'heic-converter';
            }
            // Existing chunks
            if (id.includes('@radix-ui')) {
              return 'radix-ui';
            }
            if (id.includes('framer-motion')) {
              return 'framer-motion';
            }
            if (id.includes('node_modules/highlight.js')) {
              return 'markdown_highlight';
            }
            if (id.includes('katex') || id.includes('node_modules/katex')) {
              return 'math-katex';
            }
            if (id.includes('node_modules/hast-util-raw')) {
              return 'markdown_large';
            }
            if (id.includes('@tanstack')) {
              return 'tanstack-vendor';
            }
            if (id.includes('@headlessui')) {
              return 'headlessui';
            }
            // Everything else falls into a generic vendor chunk.
            return 'vendor';
          }
          // Create a separate chunk for all locale files under src/locales.
          if (id.includes(path.join('src', 'locales'))) {
            return 'locales';
          }
          // Let Rollup decide automatically for any other files.
          return null;
        },
        entryFileNames: 'assets/[name].[hash].js',
        chunkFileNames: 'assets/[name].[hash].js',
        assetFileNames: (assetInfo) => {
          if (assetInfo.names?.[0] && /\.(woff|woff2|eot|ttf|otf)$/.test(assetInfo.names[0])) {
            return 'assets/fonts/[name][extname]';
          }
          return 'assets/[name].[hash][extname]';
        },
      },
      /**
       * Ignore "use client" warning since we are not using SSR
       * @see {@link https://github.com/TanStack/query/pull/5161#issuecomment-1477389761 Preserve 'use client' directives TanStack/query#5161}
       */
      onwarn(warning, warn) {
        if (warning.message.includes('Error when using sourcemap')) {
          return;
        }
        warn(warning);
      },
    },
    chunkSizeWarningLimit: 1500,
  },
  resolve: {
    alias: {
      '~': path.join(__dirname, 'src/'),
      $fonts: path.resolve(__dirname, 'public/fonts'),
      'micromark-extension-math': 'micromark-extension-llm-math',
    },
  },
}));
interface SourcemapExclude {
  excludeNodeModules?: boolean;
}
export function sourcemapExclude(opts?: SourcemapExclude): Plugin {
  return {
    name: 'sourcemap-exclude',
    transform(code: string, id: string) {
      if (opts?.excludeNodeModules && id.includes('node_modules')) {
        return {
          code,
          // https://github.com/rollup/rollup/blob/master/docs/plugin-development/index.md#source-code-transformations
          map: { mappings: '' },
        };
      }
    },
  };
}
</file>

<file path="packages/agents/package.json">
{
  "name": "@librechat/agents",
  "version": "2.4.60",
  "main": "./dist/cjs/main.cjs",
  "module": "./dist/esm/main.mjs",
  "types": "./dist/types/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/esm/main.mjs"
      },
      "require": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/cjs/main.cjs"
      }
    },
    "./package.json": "./package.json"
  },
  "description": "",
  "author": "Danny Avila",
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/danny-avila/agents/blob/main/LICENSE"
    }
  ],
  "packageManager": "npm@10.5.2",
  "engines": {
    "node": ">=14.0.0"
  },
  "files": [
    "dist",
    "src",
    "LICENSE",
    "README.md"
  ],
  "scripts": {
    "build": "NODE_ENV=production bun run --bun rollup -c",
    "check": "bun run tsc --build --clean && bun run tsc --build"
  },
  "imports": {
    "@/*": "./src/*",
    "~/*": "./*"
  },
  "dependencies": {
  },
  "devDependencies": {
  }
}
</file>

<file path="packages/agents/rollup.config.js">
// rollup.config.js
import path from 'path';
import { fileURLToPath } from 'url';
import alias from '@rollup/plugin-alias';
// import terser from '@rollup/plugin-terser';
import commonjs from '@rollup/plugin-commonjs';
import { cleandir } from 'rollup-plugin-cleandir';
// import obfuscator from 'rollup-plugin-obfuscator';
import resolve from '@rollup/plugin-node-resolve';
import json from '@rollup/plugin-json';
import swc from '@rollup/plugin-swc';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const isProduction = process.env.NODE_ENV === 'production';
const excludedDirsInProd = [
  'src/scripts/',
  'src/specs/',
  'src/proto/',
  'routes/',
  'config/'
];
function filterProdFiles(id) {
  if (!isProduction) {
    return !excludedDirsInProd.some(dir => id.includes(dir));
  }
  return true;
}
export default {
  input: {
    main: './src/index.ts'
  },
  output: [
    {
      dir: 'dist/esm',
      format: 'es',
      entryFileNames: '[name].mjs',
      // sourcemap: !isProduction,
      sourcemap: true,
      preserveModules: true,
      preserveModulesRoot: 'src'
    },
    {
      dir: 'dist/cjs',
      format: 'cjs',
      entryFileNames: '[name].cjs',
      // sourcemap: !isProduction,
      sourcemap: true,
      preserveModules: true,
      preserveModulesRoot: 'src',
      exports: 'named'
    }
  ],
  plugins: [
    // cleandir('dist'),
    {
      name: 'filter-prod-files',
      resolveId(source, importer) {
        if (importer && !filterProdFiles(source)) {
          return false;
        }
      }
    },
    alias({
      entries: [
        { find: '@', replacement: path.resolve(__dirname, 'src') }
      ]
    }),
    resolve({
      preferBuiltins: true,
      extensions: ['.mjs', '.js', '.json', '.node', '.ts']
    }),
    commonjs({
      esmExternals: true,
      requireReturnsDefault: 'auto',
    }),
    json(),
    swc({
      // Explicitly point to the tsconfig.json file
      tsconfig: './tsconfig.json',
    }),
  ].filter(Boolean),
  external: [
    /node_modules/
  ]
};
</file>

<file path="packages/agents/tsconfig.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "dist/tsconfig.tsbuildinfo",
    "moduleResolution": "bundler",
    "module": "ESNext",
    "target": "ESNext",
    "declarationDir": "./dist/types",
    "noEmit": false,
    "emitDeclarationOnly": true,
    "rootDir": "./src",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "ts-node": {
    "transpileOnly": true,
    "swc": true
  },
  "include": ["src/**/*", "scripts/**/*"],
  "exclude": [
    "node_modules",
    "**/*.spec.ts",
    "tsconfig-paths-bootstrap.mjs",
    "src/proto/**/*",
    "dist",
    "config",
    "routes"
  ]
}
</file>

<file path="packages/api/package.json">
{
  "name": "@librechat/api",
  "version": "1.2.6",
  "type": "commonjs",
  "description": "MCP services for LibreChat",
  "main": "dist/index.js",
  "module": "dist/index.es.js",
  "types": "./dist/types/index.d.ts",
  "exports": {
    ".": {
      "require": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.js"
      }
    },
    "./package.json": "./package.json"
  },
  "scripts": {
    "build": "NODE_ENV=production bun run --bun rollup -c",
    "check": "bun run tsc --build --clean && bun run tsc --build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai",
  "dependencies": {
    "dotenv": "^17.2.0"
  },
  "devDependencies": {
    "@librechat/data-provider": "workspace:*"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "peerDependencies": {
    "@librechat/agents": "workspace:*",
    "@librechat/data-provider": "workspace:*",
    "@librechat/data-schemas": "workspace:*",
    "@modelcontextprotocol/sdk": "^1.13.3"
  }
}
</file>

<file path="packages/api/rollup.config.js">
// rollup.config.js
import { readFileSync } from 'fs';
import json from '@rollup/plugin-json';
import terser from '@rollup/plugin-terser';
import replace from '@rollup/plugin-replace';
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import swc from '@rollup/plugin-swc';
import alias from '@rollup/plugin-alias';
import path from 'path';
const pkg = JSON.parse(readFileSync(new URL('./package.json', import.meta.url), 'utf8'));
const plugins = [
  peerDepsExternal(),
  alias({
    entries: [
      { find: '~', replacement: path.resolve(__dirname, 'src') }
    ]
  }),
  resolve({
    preferBuiltins: true,
    extensions: ['.mjs', '.js', '.json', '.node', '.ts']
  }),
  replace({
    __IS_DEV__: process.env.NODE_ENV === 'development',
    preventAssignment: true,
  }),
  commonjs({
    transformMixedEsModules: true,
    requireReturnsDefault: 'auto',
  }),
  json(),
  swc({
    // Explicitly point to the tsconfig.json file
    tsconfig: './tsconfig.json',
  }),
  terser(),
];
const cjsBuild = {
  input: 'src/index.ts',
  output: {
    dir: 'dist',
    format: 'cjs',
    sourcemap: true,
    exports: 'named',
    entryFileNames: '[name].js',
  },
  // external: [...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.devDependencies || {})],
  external: [...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.devDependencies || {}), ...Object.keys(pkg.peerDependencies || {})],
  preserveSymlinks: true,
  plugins,
};
export default cjsBuild;
</file>

<file path="packages/api/tsconfig.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "dist/tsconfig.tsbuildinfo",
    "module": "ESNext",
    "target": "ES2015",
    "moduleResolution": "bundler",
    "declarationDir": "./dist/types",
    "lib": ["ES2017", "DOM", "ES2021.String"],
    "noEmit": false,
    "emitDeclarationOnly": true,
    "rootDir": "./src",
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"],
    }
  },
  "ts-node": {
    "experimentalSpecifierResolution": "node",
    "transpileOnly": true,
    "esm": true
  },
  "exclude": ["node_modules", "dist", "types"],
  "include": ["src/**/*"],
  "references": [
    {"path": "../data-schemas" },
    {"path": "../data-provider"},
    {"path": "../agents" }
  ]
}
</file>

<file path="packages/data-provider/react-query/package.json">
{
  // "name": "@librechat/react-query",
  "name": "librechat-data-provider/react-query",
  "private": true,
  "main": "../index.js",
  "module": "./index.es.js",
  "types": "../dist/types/react-query/index.d.ts",
  "dependencies": {
    "axios": "^1.7.7"
  }
}
</file>

<file path="packages/data-provider/package.json">
{
  "name": "@librechat/data-provider",
  "version": "0.7.900",
  "description": "data services for librechat apps",
  "main": "dist/index.js",
  "module": "./dist/index.es.js",
  "types": "./dist/types/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.es.js"
      },
      "require": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.js"
      }
    },
    "./react-query": {
      "import": {
        "types": "./dist/types/react-query/index.d.ts",
        "default": "./dist/react-query/index.es.js"
      },
      "require": {
        "types": "./dist/types/react-query/index.d.ts",
        "default": "./dist/react-query/index.js"
      }
    },
    "./package.json": "./package.json"
  },
  "scripts": {
    "build": "NODE_ENV=production bun run --bun rollup -c",
    "check": "bun run tsc --build --clean && bun run tsc --build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai",
  "dependencies": {
  },
  "devDependencies": {
  },
  "peerDependencies": {
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  }
}
</file>

<file path="packages/data-provider/rollup.config.js">
import resolve from '@rollup/plugin-node-resolve';
import pkg from './package.json';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import commonjs from '@rollup/plugin-commonjs';
import replace from '@rollup/plugin-replace';
import terser from '@rollup/plugin-terser';
import generatePackageJson from 'rollup-plugin-generate-package-json';
import swc from '@rollup/plugin-swc';
const plugins = [
  peerDepsExternal(),
  resolve({
    preferBuiltins: true,
    extensions: ['.mjs', '.js', '.json', '.node', '.ts']
  }),
  replace({
    __IS_DEV__: process.env.NODE_ENV === 'development',
    preventAssignment: true,
  }),
  commonjs(),
  swc({
    tsconfig: './tsconfig.json',
  }),
  terser(),
];
const subfolderPlugins = (folderName) => [
  ...plugins,
  generatePackageJson({
    baseContents: {
      name: `${pkg.name}/${folderName}`,
      private: true,
      main: '../index.js',
      module: './index.es.js', // Adjust to match the output file
      types: `../types/${folderName}/index.d.ts`, // Point to correct types file
    },
  }),
];
export default [
  {
    input: 'src/index.ts',
    output: [
      {
        file: pkg.main,
        format: 'cjs',
        sourcemap: true,
        exports: 'named',
      },
      {
        file: pkg.module,
        format: 'esm',
        sourcemap: true,
        exports: 'named',
      },
    ],
    ...{
      external: [
        ...Object.keys(pkg.dependencies || {}),
        ...Object.keys(pkg.devDependencies || {}),
        ...Object.keys(pkg.peerDependencies || {}),
        'react',
        'react-dom',
      ],
      preserveSymlinks: true,
      plugins,
    },
  },
  // Separate bundle for react-query related part
  {
    input: 'src/react-query/index.ts',
    output: [
      {
        file: 'dist/react-query/index.es.js',
        format: 'esm',
        exports: 'named',
        sourcemap: true,
      },
    ],
    external: [
      ...Object.keys(pkg.dependencies || {}),
      ...Object.keys(pkg.devDependencies || {}),
      ...Object.keys(pkg.peerDependencies || {}),
      'react',
      'react-dom',
    ],
    preserveSymlinks: true,
    plugins: subfolderPlugins('react-query'),
  },
];
</file>

<file path="packages/data-provider/tsconfig.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "dist/tsconfig.tsbuildinfo",
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "declarationDir": "./dist/types",
    "rootDir": "./src",
    "lib": ["ES2017", "DOM", "ES2021.String"],
    "noEmit": false,
    "emitDeclarationOnly": true,
    "baseUrl": "."
  },
  "exclude": ["node_modules", "dist", "types"],
  "include": ["src/**/*"]
}
</file>

<file path="packages/data-schemas/package.json">
{
  "name": "@librechat/data-schemas",
  "version": "0.0.10",
  "description": "Mongoose schemas and models for LibreChat",
  "main": "dist/index.cjs",
  "module": "dist/index.es.js",
  "types": "./dist/types/index.d.ts",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.es.js"
      },
      "require": {
        "types": "./dist/types/index.d.ts",
        "default": "./dist/index.cjs"
      }
    },
    "./package.json": "./package.json"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "NODE_ENV=production bun run --bun rollup -c",
    "check": "bun run tsc --build --clean && bun run tsc --build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai",
  "devDependencies": {
    "@rollup/plugin-alias": "^5.1.1",
    "@rollup/plugin-commonjs": "^25.0.2",
    "@rollup/plugin-json": "^6.1.0",
    "@rollup/plugin-node-resolve": "^16.0.1",
    "@rollup/plugin-replace": "^5.0.5",
    "@rollup/plugin-swc": "^0.4.0",
    "@rollup/plugin-terser": "^0.4.4",
    "@rollup/plugin-typescript": "^12.1.2",
    "@types/diff": "^6.0.0",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.0",
    "@types/traverse": "^0.6.37",
    "jest": "^29.5.0",
    "jest-junit": "^16.0.0",
    "mongodb-memory-server": "^10.1.4",
    "rimraf": "^5.0.1",
    "rollup": "^4.45.1",
    "rollup-plugin-generate-package-json": "^3.2.0",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-typescript2": "^0.35.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.0.4"
  },
  "peerDependencies": {
    "jsonwebtoken": "^9.0.2",
    "keyv": "^5.3.2",
    "klona": "^2.0.6",
    "@librechat/data-provider": "workspace:*",
    "lodash": "^4.17.21",
    "meilisearch": "^0.38.0",
    "mongoose": "^8.12.1",
    "nanoid": "^3.3.7",
    "traverse": "^0.6.11",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/",
    "access": "public"
  },
  "keywords": [
    "mongoose",
    "schema",
    "typescript",
    "librechat"
  ]
}
</file>

<file path="packages/data-schemas/rollup.config.js">
import json from '@rollup/plugin-json';
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import peerDepsExternal from 'rollup-plugin-peer-deps-external';
import swc from '@rollup/plugin-swc';
import path from 'path';
import alias from '@rollup/plugin-alias';
export default {
  input: 'src/index.ts',
  output: [
    {
      file: 'dist/index.es.js',
      format: 'es',
      sourcemap: true,
    },
    {
      file: 'dist/index.cjs',
      format: 'cjs',
      sourcemap: true,
    },
  ],
  plugins: [
    // Automatically externalize peer dependencies
    peerDepsExternal(),
    alias({
      entries: [
        { find: '~', replacement: path.resolve(__dirname, 'src') }
      ]
    }),
    // Resolve modules from node_modules
    resolve({
      preferBuiltins: true,
      extensions: ['.mjs', '.js', '.json', '.node', '.ts']
    }),
    // Convert CommonJS modules to ES6
    commonjs({
      esmExternals: true,
      requireReturnsDefault: 'auto',
    }),
    // Allow importing JSON files
    json(),
    swc({
      // Explicitly point to the tsconfig.json file
      tsconfig: './tsconfig.json',
    }),
  ],
  // Do not bundle these external dependencies
  external: ['mongoose'],
};
</file>

<file path="packages/data-schemas/tsconfig.json">
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "tsBuildInfoFile": "dist/tsconfig.tsbuildinfo",
    "target": "ES2019",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "declarationDir": "./dist/types",
    "noEmit": false,
    "emitDeclarationOnly": true,
    "rootDir": "./src",
    "baseUrl": ".",
    "paths": {
      "~/*": ["./src/*"],
    },
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "tests"],
  "references": [{ "path": "../data-provider" }]
}
</file>

<file path="package.json">
{
  "name": "librechat",
  "version": "v0.7.9-rc1",
  "description": "",
  "private": true,
  "workspaces": [
    "api",
    "client",
    "packages/*"
  ],
  "scripts": {
    "check2": "bun run --bun tsc --build",
    "check3": "bun run tsc --build --clean && bun run tsc --build"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danny-avila/LibreChat.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/danny-avila/LibreChat/issues"
  },
  "homepage": "https://librechat.ai/",
  "devDependencies": {
    "typescript-eslint": "^8.36.0"
  },
  "dependencies": {
  }
}
</file>

<file path="tsconfig.base.json">
{
  "compilerOptions": {
    "useDefineForClassFields": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "isolatedModules": true,
    "resolveJsonModule": true,
    "sourceMap": true,
    "declaration": true,
    "declarationMap": true,
    "incremental": true,
    "composite": true,
    "skipDefaultLibCheck": false,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "noErrorTruncation": true,
    "disableSizeLimit": true,
  }
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./packages/agents" },
    { "path": "./packages/data-provider" },
    { "path": "./packages/data-schemas" },
    { "path": "./packages/api" },
    { "path": "./client" },
    { "path": "./api" }
  ]
}
</file>
</files>
